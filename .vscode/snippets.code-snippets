{
  // Place your chorelist workspace snippets here. Each snippet is defined under a snippet name and has a scope, prefix, body and
  // description. Add comma separated ids of the languages where the snippet is applicable in the scope field. If scope
  // is left empty or omitted, the snippet gets applied to all languages. The prefix is what is
  // used to trigger the snippet and the body will be expanded and inserted. Possible variables are:
  // $1, $2 for tab stops, $0 for the final cursor position, and ${1:label}, ${2:another} for placeholders.
  // Placeholders with the same ids are connected.
  // Example:
  // "Print to console": {
  // 	"scope": "javascript,typescript",
  // 	"prefix": "log",
  // 	"body": [
  // 		"console.log('$1');",
  // 		"$2"
  // 	],
  // 	"description": "Log output to console"
  // }

  "Get UserID from JWT": {
    "description": "Extract userID from JWT",
    "scope": "go",
    "prefix": ["JWT"],
    "body": [
      "// Get userID from JWT",
      "var jwt token.JWTToken",
      "userID, err := jwt.GetUser(r.Header.Get(\"authorization\"))",
      "if err != nil {",
      "\tif strings.Contains(err.Error(), \"Invalid token\") {",
      "\t\tw.WriteHeader(http.StatusUnauthorized)",
      "\t} else {",
      "\t\tlog.Println(err)",
      "\t\tw.WriteHeader(http.StatusUnauthorized)",
      "\t}",
      "\treturn",
      "}",
      "",
      "if userID == \"\" {",
      "\tw.WriteHeader(http.StatusBadRequest)",
      "\treturn",
      "}"
    ]
  },
  "Get FamilyID from JWT": {
    "description": "Extract FamilyID from JWT",
    "scope": "go",
    "prefix": ["JWT"],
    "body": [
      "// Get familyID from JWT",
      "var jwt token.JWTToken",
      "familyID, err := jwt.GetFamily(r.Header.Get(\"authorization\"))",
      "if err != nil {",
      "\tif strings.Contains(err.Error(), \"Invalid token\") {",
      "\t\tw.WriteHeader(http.StatusUnauthorized)",
      "\t} else {",
      "\t\tlog.Println(err)",
      "\t\tw.WriteHeader(http.StatusUnauthorized)",
      "\t}",
      "\treturn",
      "}",
      "",
      "if familyID == \"\" {",
      "\tw.WriteHeader(http.StatusBadRequest)",
      "\treturn",
      "}"
    ]
  },
  "MakeEndpoint": {
    "description": "Stub out a MakeEndpoint function",
    "scope": "go",
    "prefix": ["NewEndpoint"],
    "body": [
      "// Make${1:name}Endpoint returns the response from our service \"${1:name}\".",
      "func Make${1:name}Endpoint(srv Service) endpoint.Endpoint {",
      "\treturn func(ctx context.Context, inputRequest interface{}) (interface{}, error) {",
      "\t\t",
      "\t}",
      "}"
    ]
  },
  "MakeRoute": {
    "description": "Stub out a service route",
    "scope": "go",
    "prefix": ["NewRoute"],
    "body": [
      "${1:router}.Methods(\"${2:method}\").Path(\"${3:path}\").Handler(httptransport.NewServer(",
      "\tendpoints.${4:endpoint},",
      "\tdecode${4:endpoint}Request,",
      "\tencode${4:endpoint}Response,",
      "\toptions...,",
      "))"
    ]
  },
  "NewServiceFunction": {
    "description": "Stub out a service function",
    "scope": "go",
    "prefix": ["NewService"],
    "body": [
      "// ${1:name} ",
      "func (${2:type}) $1{:name}(ctx context.Context) error {",
      "\tvar db Database",
      "\tcollection, err := db.${3:collection}(ctx)",
      "\tif err != nil {",
      "\t\treturn err",
      "\t}",
      "\treturn nil",
      "}"
    ]
  },
  "NewTransport": {
    "description": "Stub out a transport object",
    "scope": "go",
    "prefix": ["NewTransport"],
    "body": [
      "type ${1:name}Request struct{}",
      "type ${1:name}Response struct{}",
      "func decode${1:name}Request(ctx context.Context, r *http.Request) (interface{}, error) {",
      "\treturn nil, nil",
      "}",
      "",
      "func encode${1:name}Response(ctx context.Context, w http.ResponseWriter, r interface{}) error{",
      "\treturn nil",
      "}"
    ]
  }
}
